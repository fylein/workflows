name: Jscpd Duplication Check

on:
  workflow_call:
    inputs:
      duplication_threshold:
        description: 'Threshold percentage for code duplication'
        required: true
        type: number
      reviewer_1:
        description: 'First reviewer who can approve high duplication PRs'
        required: true
        type: string
      reviewer_2:
        description: 'Second reviewer who can approve high duplication PRs'
        required: true
        type: string
      tech_stack:
        description: 'Tech stack to check for duplication'
        required: true
        type: string
      command_to_run:
        description: 'Command to run JSCPD'
        required: true
        type: string
    secrets:
      github-token:
        description: 'GitHub token for creating/updating comments'
        required: true

jobs:
  duplication-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    env:
      DUPLICATION_THRESHOLD: ${{ inputs.duplication_threshold }}
      REVIEWER_1: ${{ inputs.reviewer_1 }}
      REVIEWER_2: ${{ inputs.reviewer_2 }}
      GITHUB_TOKEN: ${{ secrets.github-token }}
      TECH_STACK: ${{ inputs.tech_stack }}
      COMMAND_TO_RUN: ${{ inputs.command_to_run }}

    steps:
      - uses: actions/checkout@v4

      - name: Checkout master branch
        run: |
          git fetch origin master --depth 1
          git checkout origin/master

      - name: Run jscpd for ${{ inputs.tech_stack }} on master branch
        env:
          TECH_STACK: ${{ inputs.tech_stack }}
          COMMAND_TO_RUN: ${{ inputs.command_to_run }}
        run: |
          $COMMAND_TO_RUN
          echo "master duplication percentage: $(jq .statistics.total.percentageTokens report/jscpd-report.json)"
          mv report report-master
          echo "master duplication percentage: $(jq .statistics.total.percentageTokens report-master/jscpd-report.json)"

      - name: Checkout back to PR branch
        run: git checkout -

      - name: Run jscpd for ${{ inputs.tech_stack }}
        env:
          COMMAND_TO_RUN: ${{ inputs.command_to_run }}
        run: |
          $COMMAND_TO_RUN
          echo "jscpd version: $(npx jscpd --version)"
          echo "pr duplication percentage: $(jq .statistics.total.percentageTokens report/jscpd-report.json)"

      - name: Extract duplication percentage - ${{ inputs.tech_stack }}
        id: duplication
        run: |
          percent=$(jq .statistics.total.percentageTokens report/jscpd-report.json)
          echo "duplication=$percent" >> "$GITHUB_OUTPUT"

      - name: Post duplication comment - ${{ inputs.tech_stack }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('report/jscpd-report.json', 'utf8'));
            const masterReport = JSON.parse(fs.readFileSync('report-master/jscpd-report.json', 'utf8'));

            const formatDiff = (current, master) => {
              const diff = (current - master).toFixed(2);
              const absDiff = Math.abs(diff);
              if (absDiff < 0.01) {
                return `(${current.toFixed(2)}%)`;
              }
              const symbol = diff > 0 ? '‚ùó' : diff < 0 ? 'üöÄ' : '';
              return `(${current.toFixed(2)}%) ${diff > 0 ? '+' : ''}${diff}% ${symbol}`;
            };

            const summary = `
              ### üîÅ Code Duplication Report - ${process.env.TECH_STACK}

              | Format | Files analyzed | Total lines | Total tokens | Clones found | Duplicated lines | Duplicated tokens |
              |--------|----------------|-------------|--------------|--------------|------------------|------------------|
            `;

            // Add rows for each format
            const formatRows = Object.entries(report.statistics.formats || {}).map(([format, stats]) => {
              const masterStats = masterReport.statistics.formats[format] || { total: { percentage: 0, percentageTokens: 0 } };
              return `| ${format} | ${stats.total.sources} | ${stats.total.lines} | ${stats.total.tokens} | ${stats.total.clones} | ${stats.total.duplicatedLines} ${formatDiff(stats.total.percentage, masterStats.total.percentage)} | ${stats.total.duplicatedTokens} ${formatDiff(stats.total.percentageTokens, masterStats.total.percentageTokens)} |`;
            }).join('\n');

            // Add total row
            const total = report.statistics.total;
            const masterTotal = masterReport.statistics.total;
            const totalRow = `| **Total:** | ${total.sources} | ${total.lines} | ${total.tokens} | ${total.clones} | ${total.duplicatedLines} ${formatDiff(total.percentage, masterTotal.percentage)} | ${total.duplicatedTokens} ${formatDiff(total.percentageTokens, masterTotal.percentageTokens)} |`;

            const fullSummary = `${summary}${formatRows}\n${totalRow}\n\n`;

            // Add human-readable summary of changes
            const tokenDiff = (total.percentageTokens - masterTotal.percentageTokens).toFixed(2);
            const absTokenDiff = Math.abs(tokenDiff);
            let changeSummary = '';

            if (absTokenDiff < 0.01) {
              changeSummary = '# üìä No significant change in code duplication.';
            } else if (tokenDiff > 0) {
              changeSummary = `# ‚ö†Ô∏è This PR introduces ${absTokenDiff}% more duplicated code.`;
            } else {
              changeSummary = `# üéâ This PR reduces duplicated code by ${absTokenDiff}%!`;
            }

            const fullSummaryWithStatus = `${fullSummary}${changeSummary}`;

            // Fetch existing comments
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number
            });

            // Delete old comments made by this bot with same header
            const botLogin = context.actor;
            for (const comment of comments) {
              if (
                (comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot') &&
                comment.body.includes(`### üîÅ Code Duplication Report - ${process.env.TECH_STACK}`)
              ) {
                await github.rest.issues.deleteComment({
                  ...context.repo,
                  comment_id: comment.id
                });
              }
            }

            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: fullSummaryWithStatus
            });

      - name: Check PR approvals for bypass
        id: approvals
        uses: actions/github-script@v7
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const approved = reviews.some(review =>
              review.state === "APPROVED" &&
              (review.user.login === process.env.REVIEWER_1 || review.user.login === process.env.REVIEWER_2)
            );

            core.setOutput("approved_by_reviewer", approved);

      - name: Comment if duplication > threshold and not approved
        if: fromJSON(steps.duplication.outputs.duplication) > env.DUPLICATION_THRESHOLD && steps.approvals.outputs.approved_by_reviewer == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number
            });

            // Delete old comments made by this bot with same header
            const botLogin = context.actor;
            for (const comment of comments) {
              if (
                (comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot') &&
                comment.body.includes('Duplication threshold crosses beyond')
              ) {
                await github.rest.issues.deleteComment({
                  ...context.repo,
                  comment_id: comment.id
                });
              }
            }

            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `‚ùå ${process.env.TECH_STACK} Duplication threshold crosses beyond ${process.env.DUPLICATION_THRESHOLD}%. Please check for potential code duplication. If it is critical, please take approvals from **${process.env.REVIEWER_1}** or **${process.env.REVIEWER_2}** for merging the pull request. Once approved, you can re-run the workflow.`
            });

      - name: Fail if duplication > threshold and not approved
        if: fromJSON(steps.duplication.outputs.duplication) > env.DUPLICATION_THRESHOLD && steps.approvals.outputs.approved_by_reviewer == 'false'
        run: |
          echo "Duplication threshold crosses beyond ${DUPLICATION_THRESHOLD}%. Please check for potential code duplication. If it is critical, please take approvals from **${REVIEWER_1}** or **${REVIEWER_2}** for merging the pull request. Once approved, you can re-run the workflow."
          exit 1
