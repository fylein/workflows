name: Jscpd Duplication Check

on:
  workflow_call:
    inputs:
      duplication_threshold:
        description: 'Threshold percentage for code duplication'
        required: true
        type: number
      reviewer_1:
        description: 'First reviewer who can approve high duplication PRs'
        required: true
        type: string
      reviewer_2:
        description: 'Second reviewer who can approve high duplication PRs'
        required: true
        type: string
      tech_stack:
        description: 'Tech stack to check for duplication'
        required: true
        type: string
      command_to_run:
        description: 'Command to run JSCPD'
        required: true
        type: string
    secrets:
      github-token:
        description: 'GitHub token for creating/updating comments'
        required: true

jobs:
  duplication-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    env:
      DUPLICATION_THRESHOLD: ${{ inputs.duplication_threshold }}
      REVIEWER_1: ${{ inputs.reviewer_1 }}
      REVIEWER_2: ${{ inputs.reviewer_2 }}
      GITHUB_TOKEN: ${{ secrets.github-token }}

    steps:
      - uses: actions/checkout@v4

      - name: Run jscpd for ${{ inputs.tech_stack }}
        run: |
          ${{ inputs.command_to_run }}
          cat report/jscpd-report.json

      - name: Extract duplication percentage - ${{ inputs.tech_stack }}
        id: duplication
        run: |
          percent=$(jq .statistics.total.percentageTokens report/jscpd-report.json)
          echo "duplication=$percent" >> "$GITHUB_OUTPUT"

      - name: Post duplication comment - ${{ inputs.tech_stack }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('report/jscpd-report.json', 'utf8'));
            const summary = `
              ### 🔁 Code Duplication Report - ${{inputs.tech_stack}}

              | Format | Files analyzed | Total lines | Total tokens | Clones found | Duplicated lines | Duplicated tokens |
              |--------|----------------|-------------|--------------|--------------|------------------|------------------|
            `;

            // Add rows for each format
            const formatRows = Object.entries(report.statistics.formats || {}).map(([format, stats]) => {
              return `| ${format} | ${stats.total.sources} | ${stats.total.lines} | ${stats.total.tokens} | ${stats.total.clones} | ${stats.total.duplicatedLines} (${stats.total.percentage}%) | ${stats.total.duplicatedTokens} (${stats.total.percentageTokens}%) |`;
            }).join('\n');

            // Add total row
            const total = report.statistics.total;
            const totalRow = `| **Total:** | ${total.sources} | ${total.lines} | ${total.tokens} | ${total.clones} | ${total.duplicatedLines} (${total.percentage}%) | ${total.duplicatedTokens} (${total.percentageTokens}%) |`;

            const fullSummary = `${summary}${formatRows}\n${totalRow}`;

            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: fullSummary
            });

      - name: Check PR approvals for bypass
        id: approvals
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return data;

      - name: Determine reviewers approval status
        id: reviewers
        run: |
          echo '${{ steps.approvals.outputs.result }}' > reviews.json
          echo "Full reviews data:"
          cat reviews.json
          approved=$(jq -r "map(select(.state == \"APPROVED\" and (.user.login == env.REVIEWER_1 or .user.login == env.REVIEWER_2))) | length > 0" reviews.json)
          echo "Approval check result: $approved"
          echo "approved_by_reviewer=$approved" >> "$GITHUB_OUTPUT"

      - name: Comment if duplication > threshold and not approved
        if: fromJSON(steps.duplication.outputs.duplication) > env.DUPLICATION_THRESHOLD && steps.reviewers.outputs.approved_by_reviewer == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `❌ ${{inputs.tech_stack}} Duplication threshold crosses beyond ${{inputs.duplication_threshold}}%. Please check for potential code duplication. If it is critical, please take approvals from **${{inputs.reviewer_1}}** or **${{inputs.reviewer_2}}** for merging the pull request. Once approved, you can re-run the workflow.`
            });

      - name: Fail if duplication > threshold and not approved
        if: fromJSON(steps.duplication.outputs.duplication) > env.DUPLICATION_THRESHOLD && steps.reviewers.outputs.approved_by_reviewer == 'false'
        run: |
          echo "Duplication threshold crosses beyond ${DUPLICATION_THRESHOLD}%. Please check for potential code duplication. If it is critical, please take approvals from **${{inputs.reviewer_1}}** or **${{inputs.reviewer_2}}** for merging the pull request. Once approved, you can re-run the workflow."
          exit 1
